version: 2
jobs:
  test:
    docker:
      - image: cypress/base:10
    steps:
      - checkout
      # restore folders with npm dependencies and Cypress binary
      - restore_cache:
          keys:
            - cache-{{ checksum "package.json" }}
      # install npm dependencies and Cypress binary
      # if they were cached, this step is super quick
      - run:
          name: Install dependencies
          command: yarn
      # save npm dependencies and Cypress binary for future runs
      - save_cache:
          key: cache-{{ checksum "package.json" }}
          paths:
            - ~/.npm
            - ~/.cache
      # start server before starting tests
      - run:
          command: REACT_APP_PARSE_SERVER_URL=https://staging-api.please.com yarn start
          background: true
      - run:
          command: yarn test-ci
  build:
    docker:
      # specify the version you desire here
      - image: circleci/node:8.10

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Install Dependencies
          command: |
            yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      # Run tests
      - run:
          name: Set up commit status
          command: |
            curl -i -H "Authorization: token ${GIT_TOKEN}" -H "Content-Type: application/json" --request POST --data "{\"state\": \"pending\", \"description\": \"Waiting for build to finish\", \"context\": \"ci/deploy-feature\"}" https://api.github.com/repos/deens-com/frontend/statuses/${CIRCLE_SHA1}
            curl -i -H "Authorization: token ${GIT_TOKEN}" -H "Content-Type: application/json" --request POST --data "{\"state\": \"pending\", \"description\": \"Waiting for deployment to finish\", \"context\": \"ci/regression-tests\"}" https://api.github.com/repos/deens-com/frontend/statuses/${CIRCLE_SHA1}

      #- run:
      #    name: Run Tests
      #    command: |
      #      yarn test
      - run:
          name: Configure Git
          command: |
            git config --global user.email "$GIT_AUTHOR_EMAIL" && \
            git config --global user.name "$GIT_AUTHOR_NAME"
      # Buld and Deploy
      - deploy:
          name: Build and Deploy
          command: |
            curl -i -H "Authorization: token ${GIT_TOKEN}" -H "Content-Type: application/json" --request POST --data "{\"state\": \"pending\", \"description\": \"Deployment started\", \"context\": \"ci/deploy-feature\"}" https://api.github.com/repos/deens-com/frontend/statuses/${CIRCLE_SHA1}

            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
              CI=false npm run build:staging && \
              cd build && \
              npx now --team please -t $NOW_SH_TOKEN && \
              npx now --team please -t $NOW_SH_TOKEN alias deens-staging
            else
              CI=false npm run build:staging && \
              cd build && \
              echo "export URL=$(npx now --team please -t $NOW_SH_TOKEN)" > /tmp/env.tmp && source /tmp/env.tmp && \
              npx now --team please -t $NOW_SH_TOKEN alias deens-${CIRCLE_BRANCH}

              if [ "${URL}" == "" ]; then
                curl -i -H "Authorization: token ${GIT_TOKEN}" -H "Content-Type: application/json" --request POST --data "{\"state\": \"error\", \"description\": \"Deployment failed\", \"context\": \"ci/deploy-feature\"}" https://api.github.com/repos/deens-com/frontend/statuses/${CIRCLE_SHA1} && \
                false
              fi

              curl -i -H "Authorization: token ${GIT_TOKEN}" -H "Content-Type: application/json" --request POST --data "{\"state\": \"success\", \"target_url\": \"https://deens-${CIRCLE_BRANCH}.now.sh\", \"description\": \"Feature deployed\", \"context\": \"ci/deploy-feature\"}" https://api.github.com/repos/deens-com/frontend/statuses/${CIRCLE_SHA1}
            fi
      # Run visual regression tests
      - run:
          name: Run GhostInspector
          command: |
            curl -i -H "Authorization: token ${GIT_TOKEN}" -H "Content-Type: application/json" --request POST --data "{\"state\": \"pending\", \"description\": \"Regression tests started\", \"context\": \"ci/regression-tests\"}" https://api.github.com/repos/deens-com/frontend/statuses/${CIRCLE_SHA1}

            if [ "${CIRCLE_BRANCH}" != "master" ] && [ "${CIRCLE_BRANCH}" != "staging" ]; then
              source /tmp/env.tmp && \
              bash -c 'while [[ "$(curl -s -o /tmp/curl.json -w ''%{http_code}'' https://api.ghostinspector.com/v1/suites/5b4f7cc48cbdd775d4a69c27/execute/?apiKey=${GI_API_KEY} -d 'startUrl=https://deens-${CIRCLE_BRANCH}.now.sh')" != "200" ]]; do sleep 5; done' && \
              export GI_STATUS=$(node -p "(require('/tmp/curl.json').data[0].passing) ? 'Passed' : 'Failed'") && \
              export GI_RESULT_ID=$(node -p "require('/tmp/curl.json').data[0].suiteResult") && \

              if [ "${GI_STATUS}" == "Failed" ]; then
                curl -i -H "Authorization: token ${GIT_TOKEN}" -H "Content-Type: application/json" --request POST --data "{\"state\": \"failure\", \"target_url\": \"https://app.ghostinspector.com/suite-results/${GI_RESULT_ID}\", \"description\": \"Regression tests failed\", \"context\": \"ci/regression-tests\"}" https://api.github.com/repos/deens-com/frontend/statuses/${CIRCLE_SHA1} && \
                false
              fi

              curl -i -H "Authorization: token ${GIT_TOKEN}" -H "Content-Type: application/json" --request POST --data "{\"state\": \"success\", \"target_url\": \"https://app.ghostinspector.com/suite-results/${GI_RESULT_ID}\", \"description\": \"Regression tests finished\", \"context\": \"ci/regression-tests\"}" https://api.github.com/repos/deens-com/frontend/statuses/${CIRCLE_SHA1}
            fi
workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test